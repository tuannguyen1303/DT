// <auto-generated />
using System;
using DigitalTwin.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DigitalTwin.Data.Migrations
{
    [DbContext(typeof(DigitalTwinContext))]
    [Migration("20220922021026_UpdateEntityTbl")]
    partial class UpdateEntityTbl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("pivot_da_middleware_digital")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DigitalTwin.Data.Entities.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CreatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.Property<Guid?>("EntityParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMonthToDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMonthly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuarterToDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuarterly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRealTime")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWeekly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsYearEndProjection")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsYearToDaily")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsYearToMonthly")
                        .HasColumnType("boolean");

                    b.Property<string>("KpiPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UpdatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ValueChainTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityParentId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("ValueChainTypeId");

                    b.ToTable("Entities", "pivot_da_middleware_digital");
                });

            modelBuilder.Entity("DigitalTwin.Data.Entities.EntityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CreatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityGroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UpdatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EntityTypes", "pivot_da_middleware_digital");
                });

            modelBuilder.Entity("DigitalTwin.Data.Entities.ProductLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CreatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductLinkStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitOfMeasureId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UpdatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Variance")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProductLinkStatusId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("ProductLinks", "pivot_da_middleware_digital");
                });

            modelBuilder.Entity("DigitalTwin.Data.Entities.ProductLinkStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CreatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NorCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UpdatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProductLinkStatuses", "pivot_da_middleware_digital");
                });

            modelBuilder.Entity("DigitalTwin.Data.Entities.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CreatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UomId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UpdatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasures", "pivot_da_middleware_digital");
                });

            modelBuilder.Entity("DigitalTwin.Data.Entities.ValueChainType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CreatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("UpdatedBy")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ValueChainTypes", "pivot_da_middleware_digital");
                });

            modelBuilder.Entity("DigitalTwin.Data.Entities.Entity", b =>
                {
                    b.HasOne("DigitalTwin.Data.Entities.Entity", "EntityParent")
                        .WithMany()
                        .HasForeignKey("EntityParentId");

                    b.HasOne("DigitalTwin.Data.Entities.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalTwin.Data.Entities.ValueChainType", "ValueChainType")
                        .WithMany()
                        .HasForeignKey("ValueChainTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityParent");

                    b.Navigation("EntityType");

                    b.Navigation("ValueChainType");
                });

            modelBuilder.Entity("DigitalTwin.Data.Entities.ProductLink", b =>
                {
                    b.HasOne("DigitalTwin.Data.Entities.Entity", "Child")
                        .WithMany("Children")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalTwin.Data.Entities.Entity", "Parent")
                        .WithMany("Parents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalTwin.Data.Entities.ProductLinkStatus", "ProductLinkStatus")
                        .WithMany()
                        .HasForeignKey("ProductLinkStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalTwin.Data.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");

                    b.Navigation("ProductLinkStatus");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("DigitalTwin.Data.Entities.Entity", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Parents");
                });
#pragma warning restore 612, 618
        }
    }
}
